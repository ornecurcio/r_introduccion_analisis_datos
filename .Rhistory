x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)
j = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
x = j$minimum
eval(derivada)
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)Determinar el valor que minimiza la función $f$.
j = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
#e) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = j$minimum
eval(derivada)
#f)Determinar el valor que maximiza la función $f$.
max <- optimize(f, c(pi/4, 9*pi/4))$maximum
cat("El valor que maximiza la función f(x) es:", max)
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)Determinar el valor que minimiza la función $f$.
j = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
#e) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = j$minimum
eval(derivada)
#f)Determinar el valor que maximiza la función $f$.
max <- optimize(f, c(pi/4, 9*pi/4))$maximum
max
#cat("El valor que maximiza la función f(x) es:", max)
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)Determinar el valor que minimiza la función $f$.
j = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
#e) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = j$minimum
eval(derivada)
#f)Determinar el valor que maximiza la función $f$.
max <- optimize(f, interval = c(pi/4, 9*pi/4), maximum = TRUE)
max
#cat("El valor que maximiza la función f(x) es:", max)
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)Determinar el valor que minimiza la función $f$.
j = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
#e) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = j$minimum
eval(derivada)
#f)Determinar el valor que maximiza la función $f$.
max <- optimize(f, interval = c(pi/4, 9*pi/4), maximum = TRUE)
cat("El valor que maximiza la función f(x) es:", max$maximum)
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
legend("topright", legend = c("f(x)", "f'(x)"), col = c("blue", "red"), lty = 1)
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)Determinar el valor que minimiza la función $f$.
j = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
#e) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = j$minimum
eval(derivada)
#f)Determinar el valor que maximiza la función $f$.
max <- optimize(f, interval = c(pi/4, 9*pi/4), maximum = TRUE)
cat("El valor que maximiza la función f(x) es:", max$maximum)
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
legend("topright", legend = c("f(x)", "f'(x)"), col = c("blue", "red"), lty = 1)
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)Determinar el valor que minimiza la función $f$.
min = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
cat("El valor que minimiza la función f(x) es:", j$minimum)
#e) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = min$minimum
cat("f'(x) en el valor que minimiza a f(x) es", eval(derivada))
#f)Determinar el valor que maximiza la función $f$.
max <- optimize(f, interval = c(pi/4, 9*pi/4), maximum = TRUE)
cat("El valor que maximiza la función f(x) es:", max$maximum)
#g) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = max$maximum
cat("f'(x) en el valor que maximiza a f(x) es", eval(derivada))
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
legend("topright", legend = c("f(x)", "f'(x)"), col = c("blue", "red"), lty = 1)
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)Determinar el valor que minimiza la función $f$.
min = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
print("El valor que minimiza la función f(x) es:", j$minimum)
#e) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = min$minimum
print("f'(x) en el valor que minimiza a f(x) es", eval(derivada))
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
legend("topright", legend = c("f(x)", "f'(x)"), col = c("blue", "red"), lty = 1)
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)Determinar el valor que minimiza la función $f$.
min = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
cat("El valor que minimiza la función f(x) es:", j$minimum)
#e) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = min$minimum
cat("\nf'(x) en el valor que minimiza a f(x) es", eval(derivada))
#f)Determinar el valor que maximiza la función $f$.
max <- optimize(f, interval = c(pi/4, 9*pi/4), maximum = TRUE)
cat("\nEl valor que maximiza la función f(x) es:", max$maximum)
#g) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = max$maximum
cat("\nf'(x) en el valor que maximiza a f(x) es", eval(derivada))
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
legend("topright", legend = c("f(x)", "f'(x)"), col = c("blue", "red"), lty = 1)
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)Determinar el valor que minimiza la función $f$.
min = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
cat("El valor que minimiza la función f(x) es:", j$minimum)
#e) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = min$minimum
cat("\nf(x) en el valor que minimiza a f(x) es", round(eval(derivada),0))
#f)Determinar el valor que maximiza la función $f$.
max <- optimize(f, interval = c(pi/4, 9*pi/4), maximum = TRUE)
cat("\nEl valor que maximiza la función f(x) es:", max$maximum)
#g) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = max$maximum
cat("\nf(x) en el valor que maximiza a f(x) es", round(eval(derivada),0))
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
f = function(x) cos(x)
derivada <-D(expression(cos(x)), 'x')
fprima <- eval(derivada)
x = seq(pi/4, (9/4) * pi, length.out = 100)
plot(x, f(x), type = "l",xlim=c(0,8), ylim = c(-1.5,1.5), col = "blue", xlab = "x", ylab = "f(x)", main = "Funcion f(x)  y f'(x)")
points(x, eval(fprima), type = "l", col = "red")
legend("topright", legend = c("f(x)", "f'(x)"), col = c("blue", "red"), lty = 1)
#a) La derivada sera positiva en x ={4, 5,6} negativa en x = {1,2,3}cero en x = {3.25, 6.25}
#d)Determinar el valor que minimiza la función $f$.
min = optimize(f, lower = -2, upper = 10) # encuentra el minimo entre
cat("El valor que minimiza la función f(x) es:", j$minimum)
#e) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = min$minimum
cat("\nf'(x) en el valor que minimiza a f(x) es", round(eval(derivada),0))
#f)Determinar el valor que maximiza la función $f$.
max <- optimize(f, interval = c(pi/4, 9*pi/4), maximum = TRUE)
cat("\nEl valor que maximiza la función f(x) es:", max$maximum)
#g) ¿Cuánto vale $f^{\prime}(x)$ evaluada en el valor hallado en el item anterior?
x = max$maximum
cat("\nf'(x) en el valor que maximiza a f(x) es", round(eval(derivada),0))
f = function(x) 2*x
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = 2x")
f = function(x) 2*x
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = 2x")
#a)
integrate(f,0,1)
f = function(x) 2*x
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = 2x")
#a)
area = integrate(f,0,1)
area$value
f = function(x) 2*x + 1
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = 2x")
#b)
area = integrate(f,0.5,1.5)
area$value
f = function(x) 2*x + 1
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = 2x")
#b)
area = integrate(f,0.5,1.5)
area$value
#c)
# Crear vector de valores de x para el área sombreada
x_area = seq(0.5, 1.5, 0.01)
# Evaluar función en cada valor de x del área sombreada
y_area = 2*x_area + 1
# Crear vector de coordenadas para el sombreado
coords = rbind(c(0.5, 0), c(x_area, y_area), c(1.5, 0))
# Graficar función y área sombreada
plot(x, y, type="l", col="blue", lwd=2, xlab="x", ylab="y")
f = function(x) exp(-2*x)
g = function(x) exp(-x)
x <- seq(-0, 5, length.out = 101)
plot(x, f(x), type = "l", col = "blue", xlab = "x", ylab = "f(x)", main = "Funciones f(x) y g(x)")
points(x, g(x), type = "l", col = "red")
legend("topright", legend = c("f(x)", "g(x)"), col = c("blue", "red"), lty = 1)
area <- integrate(function(x) g(x) - f(x), lower = 1, upper = 3)
area$
area$value
# Crear vectores de coordenadas para el polígono a sombrear
xshade <- c(1, seq(1, 3, length.out = 101), 3, 3, 1)
yshade <- c(f(1), f(seq(1, 3, length.out = 101)), f(3), g(3), g(1))
# Sombrear el polígono
polygon(xshade, yshade, col = "gray")
#cat("El área encerrada entre f(x) y g(x), x = 1 y x = 3 es:", area)
#a = integrate(g,1,3)
#b = integrate(f,1,3)
#a
#b
f = function(x) 2*x + 1
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = 2x")
#b)
area = integrate(f,0.5,1.5)
area$value
#c)
# Crear vector de valores de x para el área sombreada
x_area = seq(0.5, 1.5, 0.01)
# Evaluar función en cada valor de x del área sombreada
y_area = 2*x_area + 1
# Crear vector de coordenadas para el sombreado
coords = rbind(c(0.5, 0), c(x_area, y_area), c(1.5, 0))
# Graficar función y área sombreada
#plot(x, y, type="l", col="blue", lwd=2, xlab="x", ylab="y")
polygon(coords, col="gray80")
f = function(x) 2*x + 1
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = 2x")
#b)
area = integrate(f,0.5,1.5)
area$value
#c)
# Graficar función y área sombreada
x <- seq(0.5, 1.5, length.out = 100)
y <- f(x)
polygon(c(0.5, x, 1.5), c(f(0.5), y, f(1.5)), col = "gray")
f = function(x) 2*x + 1
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = 2x")
#b)
area = integrate(f,0.5,1.5)
area$value
#c)
x <- seq(0.5, 1.5, length.out=100)
y <- f(x)
polygon(c(0.5, x, 1.5), c(0, y, 0), col="gray")
curve(f, 0, 2, add=TRUE)
f = function(x) 2*x + 1
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = 2x")
#b)
area = integrate(f,0.5,1.5)
area
#c)
x <- seq(0.5, 1.5, length.out=100)
y <- f(x)
polygon(c(0.5, x, 1.5), c(0, y, 0), col="gray")
curve(f, 0, 2, add=TRUE)
f = function(x) -x + 1
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = -x+1")
#b)
area = integrate(f,1,2)
area
#c)
x <- seq(1, 2, length.out=100)
y <- f(x)
polygon(c(1, x, 2), c(0, y, 0), col="gray")
curve(f, 0, 2, add=TRUE)
f = function(x) -x + 1
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = -x+1")
#b)
area = integrate(f,1,2)
area
#c)
#x <- seq(1, 2, length.out=100)
#y <- f(x)
#polygon(c(1, x, 2), c(0, y, 0), col="gray")
#curve(f, 0, 2, add=TRUE)
f = function(x) -x + 1
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = -x+1")
#b)
area = integrate(f,1,2)
area
#c)
#x <- seq(1, 2, length.out=100)
#y <- f(x)
#polygon(c(1, x, 2), c(0, y, 0), col="gray")
#curve(f, 0, 2, add=TRUE)
f = function(x) exp(-2*x)
x = seq(0, 7, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = -x+1")
#b)
area_1 = integrate(f,0,2)
area_1
area_2 = integrate(f,0,4)
area_2
area_3 = integrate(f,0,5)
area_3
area_4 = integrate(f,0,100)
area_4
area_5 = integrate(f,0,Inf)
area_5
f = function(x) exp(-2*x)
x = seq(0, 7, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = exp(-2x)")
#b)
area_1 = integrate(f,0,2)
area_1
area_2 = integrate(f,0,4)
area_2
area_3 = integrate(f,0,5)
area_3
area_4 = integrate(f,0,100)
area_4
area_5 = integrate(f,0,Inf)
area_5
f = function(x) exp(-2*x)
x = seq(0, 7, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = exp(-2x)")
#b)
area_1 = integrate(f,0,2)
area_1$value
area_2 = integrate(f,0,4)
area_2$value
area_3 = integrate(f,0,5)
area_3$value
area_4 = integrate(f,0,100)
area_4$value
area_5 = integrate(f,0,Inf)
area_5$value
par(mfrow = c(1, 2))
plot(x1, y1)
par(mfrow = c(1, 2))
f = function(x) exp(-2*x)
x = seq(0, 7, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = exp(-2x)")
#b)
area_1 = integrate(f,0,2)
area_1$value
area_2 = integrate(f,0,4)
area_2$value
area_3 = integrate(f,0,5)
area_3$value
area_4 = integrate(f,0,100)
area_4$value
area_5 = integrate(f,0,Inf)
area_5$value
f = function(x) exp(-2*x)
x = seq(0, 7, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = exp(-2x)")
#b)
area_1 = integrate(f,0,2)
area_1$value
area_2 = integrate(f,0,4)
area_2$value
area_3 = integrate(f,0,5)
area_3$value
area_4 = integrate(f,0,100)
area_4$value
area_5 = integrate(f,0,Inf)
area_5$value
f = function(x) exp(-2*x)
g = function(x) exp(-x)
x <- seq(-0, 5, length.out = 101)
plot(x, f(x), type = "l", col = "blue", xlab = "x", ylab = "f(x)", main = "Funciones f(x) y g(x)")
points(x, g(x), type = "l", col = "red")
legend("topright", legend = c("f(x)", "g(x)"), col = c("blue", "red"), lty = 1)
area <- integrate(function(x) g(x) - f(x), lower = 1, upper = 3)
area$
area$value
# Crear vectores de coordenadas para el polígono a sombrear
xshade <- c(1, seq(1, 3, length.out = 101), 3, 3, 1)
yshade <- c(f(1), f(seq(1, 3, length.out = 101)), f(3), g(3), g(1))
# Sombrear el polígono
polygon(xshade, yshade, col = "gray")
#cat("El área encerrada entre f(x) y g(x), x = 1 y x = 3 es:", area)
#a = integrate(g,1,3)
#b = integrate(f,1,3)
#a
#b
f = function(x) exp(-lambdas*x)
x <- seq(0, 1.5, 100)
lambdas = seq(0.01,10,0.01)
integral <- numeric(length(lambdas))
for (i in seq_along(lambdas)) {
integral[i] =  integrate(function(x) exp(-lambdas[i]*x), 0, 1.5)$value
}
plot(lambdas, integral, type = "l", xlab = expression(lambda), ylab = "Integral")
f = function(x) -3 * x
integrate(f, 0, Inf)
f = function(x) -3 * x
integrate(f, 0, Inf)
f = function(x) -3*x
integrate(f, 0, Inf)
f = function(x) -2*x
integrate(f, 0, Inf)
f = function(x) 2*x
x = seq(0, 2, length.out = 100)
plot(x, f(x), type = "l", xlab = "x", ylab = "f(x)", main = "Gráfico de f(x) = 2x")
#b)
area = integrate(f,0,1)
area$value
f = function(x) exp(-2*x)
integrate(f, 0, Inf)
f = function(x) -3*x
integrate(f, 0, Inf)
f = function(x) exp(-3*x)
integrate(f, 0, Inf)
mu <- 3
sigma <- 2
f <- function(x) dnorm(x, mean = mu, sd = sigma)
result <- integrate(f, -Inf, 1)
result$value # El resultado es 0.6914625
mu <- 3
sigma <- 2
f <- function(x) dnorm(x, mean = mu, sd = sigma)
result <- integrate(f, -Inf, 1)
result$value # El resultado es 0.6914625
